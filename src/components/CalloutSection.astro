---
import StyledLink from './StyledLink.astro';

interface Props {
  label: string;
  title: string;
  listTitle?: string;
  listItems?: string[];
  paragraphs?: string[];
  ctaText?: string;
  ctaLink?: string;
  color?: 'mint' | 'coral' | 'purple' | 'blue' | 'lime' | 'highlight'; // Add color property
}

const {
  label = "Design",
  title,
  listTitle = "I design and build custom websites that blend:",
  listItems = [],
  paragraphs = [],
  ctaText = "more about me",
  ctaLink = "/about",
  color = 'mint' // Default to mint color for geometric shapes and label
} = Astro.props;

// Map the shape color to the secondary button variant
const buttonVariant = `secondary-${color}`;
---

<div class="neo-card-base py-12 md:py-16 px-8 md:px-12 relative overflow-hidden">
  <!-- Absolute positioned gradient background with different direction -->
  <div class={`absolute inset-0 -z-10 bg-gradient-to-tr from-white via-white to-${color}/20`}></div>
  
  <!-- Colored label section - positioned INSIDE the border -->
  <div class={`absolute top-4 left-4 p-2 bg-${color} border-3 border-black text-black font-serif font-bold text-xl uppercase z-10`}>{label}</div>
  
  <h2 class="neo-heading text-4xl md:text-5xl mb-10 mt-16 text-text">{title}</h2>
  
  <!-- ProfileBadge slot if provided -->
  <slot name="profile-badge" />
  
  <div class="flex flex-col md:flex-row gap-10 md:gap-16">
    {listItems && listItems.length > 0 && (
      <div class="flex-1">
        {listTitle && <p class="neo-text text-lg mb-6">{listTitle}</p>}
        <ul class="mb-8 text-lg text-text">
          {listItems.map((item) => (
            <li class="neo-text flex items-start mb-4">
              <!-- Geometric shape instead of icon -->
              <span class={`h-4 w-4 transform rotate-45 bg-${color} border-2 border-black flex-shrink-0 mt-1.5 mr-4`}></span>
              <span class="flex-grow">{item}</span>
            </li>
          ))}
        </ul>
      </div>
    )}
    
    {paragraphs && paragraphs.length > 0 && (
      <div class="flex-1">
        {paragraphs.map((paragraph, index) => (
          <p class={`neo-text text-lg ${index < paragraphs.length - 1 ? 'mb-6' : 'mb-8'}`}>{paragraph}</p>
        ))}
      </div>
    )}
  </div>
  
  <div class="flex justify-end mt-8">
    <StyledLink href={ctaLink} variant={buttonVariant}>{ctaText}</StyledLink>
  </div>
</div>