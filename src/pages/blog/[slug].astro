---
import { getCollection, getEntry } from 'astro:content';
import Layout from '../../layouts/Layout.astro';
import StyledLink from '../../components/StyledLink.astro';
import ContactCTA from '../../components/ContactCTA.astro';
import MobileCTA from '../../components/MobileCTA.astro';

// Generate pages for all blog posts
export async function getStaticPaths() {
  const blogEntries = await getCollection('blog');
  
  return blogEntries.map(entry => ({
    params: { slug: entry.slug },
    props: { entry },
  }));
}

// Get the blog post data for this page
const { entry } = Astro.props;
const { Content } = await entry.render();

// Add this line to get the featured image
const featuredImage = entry.data.featuredImage;

// Get CTA placement setting from frontmatter (default to 'after-hero')
const ctaPlacement = entry.data.ctaPlacement || 'after-hero';

// Get other blog posts for the "Related Articles" section
const allBlogPosts = await getCollection('blog');
const otherPosts = allBlogPosts
  .filter(post => {
    if (post.slug === entry.slug) return false;
    const postCategories = Array.isArray(post.data.category) ? post.data.category : [post.data.category];
    const entryCategories = Array.isArray(entry.data.category) ? entry.data.category : [entry.data.category];
    return postCategories.some(cat => entryCategories.includes(cat));
  })
  .sort((a, b) => b.data.publishDate.getTime() - a.data.publishDate.getTime())
  .slice(0, 3);

// Format the publish date
const formattedDate = entry.data.publishDate.toLocaleDateString('en-US', {
  year: 'numeric',
  month: 'long',
  day: 'numeric'
});

// Map category to appropriate text color for the badge
const textColorMap = {
  mint: 'text-black',
  lime: 'text-black', 
  highlight: 'text-black',
  primary: 'text-white',
  coral: 'text-white',
  blue: 'text-white',
  purple: 'text-white'
};

const textColor = textColorMap[entry.data.color] || 'text-white';
---

<Layout 
  title={entry.data.seo?.title || `${entry.data.title} | Blog | Matt Whitfield - Web Designer & Developer`}
  description={entry.data.seo?.description || entry.data.description}
  image={entry.data.image || "/images/mw-headshots-2024.webp"}
>
  <!-- Hero Section with Full-Width Background -->
  <section class="w-full relative pt-32 pb-5 bg-white">
    <!-- Dynamic background gradient based on blog post color -->
    <div class={`absolute inset-0 w-full h-full bg-gradient-to-br from-white via-white to-${entry.data.color}/10`}></div>
    
    <div class="page-container relative z-1">
      <div class="max-w-4xl">
        <div class="mb-6 flex items-center gap-4">
          {Array.isArray(entry.data.category)
            ? entry.data.category.map(cat => (
                <span class={`inline-block font-serif text-sm font-medium uppercase tracking-wider bg-${entry.data.color} ${textColor} py-1 px-3 border-3 border-black mr-2`}>
                  {cat}
                </span>
              ))
            : (
                <span class={`inline-block font-serif text-sm font-medium uppercase tracking-wider bg-${entry.data.color} ${textColor} py-1 px-3 border-3 border-black`}>
                  {entry.data.category}
                </span>
              )
          }
          <span class="text-muted">{formattedDate}</span>
          {entry.data.readTime && (
            <span class="text-muted">·</span>
            <span class="text-muted">{entry.data.readTime}</span>
          )}
        </div>
        <h1 class="neo-heading text-4xl md:text-5xl lg:text-6xl mb-8 text-text leading-tight">{entry.data.title}</h1>
        <div class="mt-8 mb-12 w-full">
          <p class="neo-text text-lg mb-0">
            {entry.data.description}
          </p>
        </div>

        <!-- Add featured image here, after the title and before the description -->
        {featuredImage && (
          <div class="my-8">
            <img 
              src={featuredImage} 
              alt={entry.data.featuredImageAlt || entry.data.title}
              loading="lazy"
              class="w-full h-auto max-h-[60vh] object-contain border-3 border-black neo-shadow"
              style="display:block; margin-left:auto; margin-right:auto;"
            />
            {entry.data.featuredImageCaption && (
              <figcaption class="neo-text text-xs text-muted mt-2 text-center">{entry.data.featuredImageCaption}</figcaption>
            )}
          </div>
        )}
        
        <div class="mb-8">
          <div class="flex items-center gap-4">
            <div class="w-12 h-12 rounded-full bg-lightgray border-3 border-black overflow-hidden">
              <img 
                src="/images/mw-headshots-2024.webp" 
                alt="Matt Whitfield"
                class="w-full h-full object-cover"
              />
            </div>
            <div>
              <p class="font-serif font-bold mb-0">By {entry.data.author}</p>
              <p class="neo-text text-sm text-muted">Web Designer & Developer</p>
            </div>
          </div>
        </div>
      </div>
    </div>
  </section>
  
  <!-- Blog Content Section -->
  <section class="w-full relative py-16" id="blog-content">
    <div class="absolute inset-0 w-full h-full bg-gradient-to-br from-white via-white to-lightgray/10"></div>
    
    <div class="page-container relative z-1">
      <div class="grid grid-cols-1 lg:grid-cols-10 gap-12">
        <!-- Main Content Column -->
        <main class="lg:col-span-7">
          <!-- Blog Content -->
          <article class="prose prose-lg max-w-none">
            <Content />
          </article>
          <!-- End Blog Content -->
          
          <!-- Back to Blog Link -->
          <div class="mt-12 pt-6 border-t-2 border-black">
            <div class="flex flex-col sm:flex-row sm:items-center sm:justify-between gap-4">
              <div>
                <h4 class="font-serif font-bold text-sm uppercase mb-2">Tags</h4>
                <p class="neo-text text-xs">
                  {entry.data.tags.join(' • ')}
                </p>
              </div>
              <StyledLink href="/blog" variant={`secondary-${entry.data.color}`} size="sm">
                ← Back to Blog
              </StyledLink>
            </div>
          </div>
        </main>
        
        <!-- Placeholder for right column on desktop to maintain grid layout -->
        <div class="lg:col-span-3 hidden lg:block"></div>
      </div>
      
      <!-- Absolutely positioned CTA card -->
      <div id="desktop-cta" class="hidden lg:block fixed top-24 opacity-0 translate-y-4 transition-all duration-500 ease-out z-50">
        <div class="neo-card-base p-6">
          <div class={`inline-block px-3 py-2 bg-${entry.data.color} border-2 border-black ${textColor} font-bold text-sm uppercase mb-4`}>
            Need Help?
          </div>
          
          <h3 class="neo-card-title text-xl mb-3">Struggling with your website?</h3>
          <p class="neo-text text-sm mb-6">
            Book a free 30-minute consultation. No sales pitch, just a conversation about your website.
          </p>
          
          <StyledLink href="/contact" variant="primary" size="md" class="w-full text-center block mb-6">
            Book Free Consultation
          </StyledLink>
          
          <div class="pt-4 border-t-2 border-black">
            <h4 class="font-serif font-bold text-sm uppercase mb-3">In This Article</h4>
            <p class="neo-text text-sm mb-4">
              {entry.data.tags.join(' • ')}
            </p>
            <StyledLink href="/blog" variant={`secondary-${entry.data.color}`} size="sm" class="w-full text-center block">
              ← Back to Blog
            </StyledLink>
          </div>
        </div>
      </div>
    </div>
  </section>

  <!-- Mobile CTA - shown after hero on mobile only -->
  {ctaPlacement === 'after-hero' && (
    <div class="lg:hidden">
      <MobileCTA color={entry.data.color} textColor={textColor} />
    </div>
  )}

  <!-- Fixed Bottom CTA for Mobile -->
  <div id="mobile-bottom-cta" class="lg:hidden fixed bottom-0 left-0 right-0 z-50 p-4 bg-white border-t-3 border-black shadow-neo opacity-0 translate-y-full transition-all duration-500 ease-out">
    <div class="max-w-sm mx-auto">
      <div class="flex items-center gap-3">
        <div class="flex-1">
          <div class={`inline-block px-2 py-1 bg-${entry.data.color} border-2 border-black ${textColor} font-bold text-xs uppercase mb-2`}>
            Need Help?
          </div>
          <p class="neo-text text-sm font-bold mb-0">Free website consultation</p>
        </div>
        <StyledLink href="/contact" variant="primary" size="sm" class="flex-shrink-0">
          Book Call
        </StyledLink>
      </div>
    </div>
  </div>
    
    <!-- Related Articles Section -->
    <section class="w-full relative py-20" id="related-articles">
      <div class="absolute inset-0 w-full h-full bg-gradient-to-br from-white via-white to-coral/10"></div>
      
      <div class="page-container relative z-1">
        <h2 class="neo-heading text-3xl md:text-4xl mb-16 text-center">Related Articles</h2>
        
        <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8">
          {otherPosts.map(post => {
            const postDate = post.data.publishDate.toLocaleDateString('en-US', {
              year: 'numeric',
              month: 'long',
              day: 'numeric'
            });
            const postTextColor = textColorMap[post.data.color] || 'text-white';
            return (
              <div class={`neo-card-base neo-service-card-hover-${post.data.color} overflow-hidden p-0`}>
                <div class="p-6">
                  <div class="mb-3 flex items-center">
                    {Array.isArray(post.data.category)
                      ? post.data.category.map(cat => (
                          <span class={`inline-block bg-${post.data.color} ${postTextColor} text-sm font-bold py-1 px-3 border-2 border-black mr-2`}>
                            {cat}
                          </span>
                        ))
                      : (
                          <span class={`inline-block bg-${post.data.color} ${postTextColor} text-sm font-bold py-1 px-3 border-2 border-black mr-2`}>
                            {post.data.category}
                          </span>
                        )
                    }
                    <span class="text-sm text-muted">{postDate}</span>
                  </div>
                  <h3 class="neo-card-title">{post.data.title}</h3>
                  <p class="neo-text mb-6">{post.data.description}</p>
                  <StyledLink 
                    href={`/blog/${post.slug}`} 
                    variant={`secondary-${post.data.color}`} 
                    size="sm"
                  >
                    Read Article
                  </StyledLink>
                </div>
              </div>
            )
          })}
        </div>
      </div>
    </section>
  </main>
</Layout>

<script>
  // Scroll-triggered CTA functionality
  document.addEventListener('DOMContentLoaded', function() {
    const desktopCta = document.getElementById('desktop-cta');
    const mobileBottomCta = document.getElementById('mobile-bottom-cta');
    const blogContentSection = document.getElementById('blog-content');
    
    if (!blogContentSection) return;
    
    function positionCta() {
      // Only position desktop CTA if it exists
      if (!desktopCta) return;
      
      // Calculate where the right column should be positioned
      const pageContainer = document.querySelector('.page-container');
      const mainContent = document.querySelector('main.lg\\:col-span-7');
      
      if (!pageContainer || !mainContent) return;
      
      const containerRect = pageContainer.getBoundingClientRect();
      const mainRect = mainContent.getBoundingClientRect();
      
      // Position CTA to the right of the main content
      const rightColumnLeft = mainRect.right + 48; // 48px for gap (gap-12 = 3rem = 48px)
      const rightColumnWidth = 320; // Fixed width for CTA
      
      // Check if there's enough space for the CTA
      const viewportWidth = window.innerWidth;
      const hasSpace = rightColumnLeft + rightColumnWidth <= viewportWidth - 32; // 32px margin from edge
      
      if (hasSpace) {
        desktopCta.style.left = rightColumnLeft + 'px';
        desktopCta.style.width = rightColumnWidth + 'px';
      } else {
        // Position from the right edge with margin
        desktopCta.style.left = 'auto';
        desktopCta.style.right = '32px';
        desktopCta.style.width = '300px';
      }
    }
    
    function handleScroll() {
      const blogContentTop = blogContentSection.offsetTop;
      const relatedArticlesSection = document.getElementById('related-articles');
      const scrollY = window.scrollY;
      const windowHeight = window.innerHeight;
      
      // Calculate when to show/hide the CTA
      const showCta = scrollY >= blogContentTop - 100;
      
      // Hide CTA when Related Articles section comes into view
      let hideCta = false;
      if (relatedArticlesSection) {
        const relatedArticlesTop = relatedArticlesSection.offsetTop;
        // Hide CTA when Related Articles section is 200px from top of viewport
        hideCta = scrollY >= relatedArticlesTop - 200;
      }
      
      // Control Desktop CTA
      if (desktopCta) {
        if (showCta && !hideCta) {
          desktopCta.classList.remove('opacity-0', 'translate-y-4');
          desktopCta.classList.add('opacity-100', 'translate-y-0');
        } else {
          desktopCta.classList.add('opacity-0', 'translate-y-4');
          desktopCta.classList.remove('opacity-100', 'translate-y-0');
        }
      }
      
      // Control Mobile Bottom CTA
      if (mobileBottomCta) {
        if (showCta) {
          mobileBottomCta.classList.remove('opacity-0', 'translate-y-full');
          mobileBottomCta.classList.add('opacity-100', 'translate-y-0');
        } else {
          mobileBottomCta.classList.add('opacity-0', 'translate-y-full');
          mobileBottomCta.classList.remove('opacity-100', 'translate-y-0');
        }
      }
    }
    
    // Initial positioning and scroll check
    positionCta();
    handleScroll();
    
    // Listen to scroll and resize events
    window.addEventListener('scroll', handleScroll, { passive: true });
    window.addEventListener('resize', positionCta, { passive: true });
  });
</script>

<style is:global>
  /* Prose styling using proper CSS values */
  .prose {
    color: #1a1a1a;
  }
  
  .prose h1 {
    font-family: 'Space Grotesk', sans-serif;
    font-weight: 700;
    letter-spacing: -0.5px;
    line-height: 1.1;
    font-size: 3rem;
    margin-bottom: 3rem;
    margin-top: 5rem;
    padding-bottom: 1.5rem;
    border-bottom: 3px solid #000;
    display: inline-block;
  }
  
  .prose h2 {
    font-family: 'Space Grotesk', sans-serif;
    font-weight: 700;
    letter-spacing: -0.5px;
    line-height: 1.1;
    font-size: 2.25rem;
    margin-bottom: 2rem;
    margin-top: 4rem;
    padding-bottom: 1.5rem;
    border-bottom: 3px solid #000;
    display: inline-block;
  }
  
  .prose h3 {
    font-family: 'Space Grotesk', sans-serif;
    font-weight: 500;
    letter-spacing: -0.5px;
    line-height: 1.2;
    font-size: 1.875rem;
    margin-bottom: 1.5rem;
    margin-top: 3rem;
  }
  
  .prose h4 {
    font-family: 'Space Grotesk', sans-serif;
    font-weight: 500;
    letter-spacing: -0.5px;
    line-height: 1.2;
    font-size: 1.5rem;
    margin-bottom: 1rem;
    margin-top: 2rem;
  }
  
  .prose h5, .prose h6 {
    font-family: 'Space Grotesk', sans-serif;
    font-weight: 500;
    letter-spacing: -0.5px;
    line-height: 1.2;
    font-size: 1.25rem;
    margin-bottom: 1rem;
    margin-top: 1.5rem;
  }
  
  .prose p {
    font-family: 'Manrope', sans-serif;
    line-height: 1.6;
    margin-bottom: 2rem;
    font-size: 1.125rem;
  }
  
  .prose ul, .prose ol {
    margin-bottom: 2rem;
    padding-left: 2rem;
  }
  
  .prose ul {
    list-style-type: disc;
  }
  
  .prose ol {
    list-style-type: decimal;
  }
  
  .prose li {
    font-family: 'Manrope', sans-serif;
    line-height: 1.6;
    margin-bottom: 0.75rem;
  }
  
  .prose strong {
    font-weight: 700;
  }
  
  .prose em {
    font-style: italic;
  }
  
  .prose blockquote {
    position: relative;
    border-left: 6px solid #FF6B35;
    padding: 1.5rem 2rem;
    font-family: 'Space Grotesk', sans-serif;
    font-style: normal;
    font-size: 1.25rem;
    font-weight: 600;
    letter-spacing: -0.02em;
    line-height: 1.4;
    margin: 3rem 0;
    background-color: rgba(255, 107, 53, 0.06);
    box-shadow: 4px 4px 0px 0px rgba(0,0,0,1);
    color: #1a1a1a;
    transform: rotate(-0.5deg);
    overflow: visible;
  }
  
  .prose blockquote::before {
    content: '';
    position: absolute;
    top: -8px;
    right: -8px;
    width: 16px;
    height: 16px;
    background-color: #5CECC6;
    border: 3px solid #000;
    border-radius: 50%;
    transform: rotate(15deg);
  }
  
  .prose blockquote::after {
    content: '';
    position: absolute;
    bottom: -6px;
    left: -6px;
    width: 12px;
    height: 12px;
    background-color: #F15BB5;
    border: 2px solid #000;
    transform: rotate(-45deg);
  }
  
  /* Custom aside elements in markdown */
  .prose aside {
    position: relative;
    margin: 3rem 0;
    padding: 1.5rem 2rem;
    background-color: rgba(92, 236, 198, 0.08);
    border: 3px solid #000;
    border-left: 6px solid #5CECC6;
    box-shadow: 4px 4px 0px 0px rgba(0,0,0,1);
    font-style: italic;
    font-family: 'Space Grotesk', sans-serif;
    font-weight: 500;
    transform: rotate(0.5deg);
    overflow: visible;
  }
  
  .prose aside::before {
    content: '';
    position: absolute;
    top: -6px;
    left: -6px;
    width: 14px;
    height: 14px;
    background-color: #F15BB5;
    border: 2px solid #000;
    transform: rotate(45deg);
  }
  
  .prose aside::after {
    content: '';
    position: absolute;
    bottom: -8px;
    right: -8px;
    width: 12px;
    height: 12px;
    background-color: #FEE440;
    border: 2px solid #000;
    border-radius: 50%;
    transform: rotate(-15deg);
  }
  
  .prose code {
    background-color: #DDDDDD;
    padding: 0.25rem 0.5rem;
    border-radius: 0.25rem;
    font-size: 0.875rem;
    font-family: ui-monospace, SFMono-Regular, monospace;
    border: 1px solid rgba(0, 0, 0, 0.2);
  }
  
  .prose pre {
    background-color: #DDDDDD;
    padding: 1.5rem;
    border-radius: 0.25rem;
    overflow-x: auto;
    margin-bottom: 2rem;
    border: 2px solid #000;
  }
  
  .prose pre code {
    background-color: transparent;
    padding: 0;
    border: none;
  }
  
  .prose a {
    color: #FF6B35;
    font-family: 'Space Grotesk', sans-serif;
    font-weight: 600;
    text-decoration: underline;
    text-decoration-color: #FF6B35;
    text-decoration-thickness: 3px;
    text-underline-offset: 4px;
    padding: 0.125rem 0.25rem;
    transition: all 0.2s;
    border: 2px solid transparent;
  }
  
  .prose a:hover {
    background-color: #FF6B35;
    color: white;
    text-decoration: none;
    border-color: #000;
  }
  
  .prose hr {
    border: none;
    border-top: 3px solid #000;
    margin: 4rem 0;
  }
  
  .prose table {
    width: 100%;
    border-collapse: collapse;
    border: 3px solid #000;
    margin: 3rem 0;
    background: white;
    overflow: hidden;
    display: block;
    box-shadow: 4px 4px 0px 0px rgba(0,0,0,1);
    -webkit-overflow-scrolling: touch;
  }
  
  .prose th,
  .prose td {
    border: 1px solid #000;
    padding: 1rem;
    text-align: left;
  }
  
  .prose th {
    background-color: #FF6B35;
    color: white;
    font-weight: 700;
  }

  .prose table::-webkit-scrollbar { 
    height: 8px; 
  }


  /* Callout block - embedded in markdown content */
  .prose .neo-callout {
    margin: 3rem 0;
  }

  .prose .neo-callout .neo-card-base {
    display: block;
    border-left: 6px solid #FF6B35;
    padding: 1.5rem 2rem;
    background: linear-gradient(180deg, rgba(255,107,53,0.04), rgba(255,255,255,0.0));
    border: 3px solid #000;
    border-radius: 6px;
    box-shadow: 0 8px 0 rgba(0,0,0,0.03);
  }

  .prose .neo-callout h3 {
    font-family: 'Space Grotesk', sans-serif;
    font-weight: 700;
    font-size: 1.125rem;
    margin: 0 0 1rem 0;
    color: #1a1a1a;
  }

  .prose .neo-callout .neo-text {
    font-family: 'Manrope', sans-serif;
    font-size: 1rem;
    line-height: 1.6;
  }

  .prose .neo-callout .neo-text li {
    margin-bottom: 0.75rem;
    line-height: 1.6;
  }

  .prose .neo-callout ul {
    margin-bottom: 0;
  }

  @media (max-width: 640px) {
    .prose .neo-callout .neo-card-base {
      padding: 1rem;
    }
  }

  /* Figure / image treatment - embedded in markdown content */
  .prose .neo-figure {
    margin: 3rem 0;
  }
  
  .prose .neo-figure .neo-figure-inner {
    display: block;
    overflow: hidden;
  }
  
  .prose .neo-figure-img {
    width: 100%;
    height: auto;
    max-height: 65vh;
    object-fit: contain;
    display: block;
    margin: 0 auto;
  }
  
  .prose .neo-figure-caption {
    font-family: 'Manrope', sans-serif;
    font-size: 0.875rem;
    color: #666666;
    margin-top: 1rem;
    text-align: center;
    padding: 0.75rem;
  }

  @media (min-width: 1024px) {
    .prose .neo-figure-img {
      max-height: 48vh;
    }
  }

  @media (max-width: 768px) {
    .prose h1 {
      font-size: 2.5rem;
    }
    
    .prose h2 {
      font-size: 2rem;
    }
    
    .prose h3 {
      font-size: 1.5rem;
    }
    
    .prose h4 {
      font-size: 1.25rem;
    }
    
    .prose h5, .prose h6 {
      font-size: 1.125rem;
    }
  }
  
  /* Desktop CTA animation */
  #desktop-cta {
    transition: opacity 0.5s ease-out, transform 0.5s ease-out;
  }
</style>


